-- Create extension for vector operations
CREATE EXTENSION IF NOT EXISTS vector;

-- Create documents table for vector storage
CREATE TABLE IF NOT EXISTS documents (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  content TEXT NOT NULL,
  metadata JSONB DEFAULT '{}',
  embedding VECTOR(1536), -- OpenAI text-embedding-3-small dimensions
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS documents_embedding_idx 
ON documents USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

CREATE INDEX IF NOT EXISTS documents_metadata_idx 
ON documents USING GIN (metadata);

CREATE INDEX IF NOT EXISTS documents_created_at_idx 
ON documents (created_at);

-- Create function for similarity search
CREATE OR REPLACE FUNCTION match_documents(
  query_embedding VECTOR(1536),
  match_threshold FLOAT DEFAULT 0.7,
  match_count INT DEFAULT 10
)
RETURNS TABLE(
  id UUID,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    documents.id,
    documents.content,
    documents.metadata,
    1 - (documents.embedding <=> query_embedding) AS similarity
  FROM documents
  WHERE 1 - (documents.embedding <=> query_embedding) > match_threshold
  ORDER BY documents.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;

-- Create function for semantic search with filters
CREATE OR REPLACE FUNCTION match_documents_with_filter(
  query_embedding VECTOR(1536),
  filter_conditions JSONB DEFAULT '{}',
  match_threshold FLOAT DEFAULT 0.7,
  match_count INT DEFAULT 10
)
RETURNS TABLE(
  id UUID,
  content TEXT,
  metadata JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
DECLARE
  filter_key TEXT;
  filter_value TEXT;
  where_clause TEXT := '';
BEGIN
  -- Build dynamic WHERE clause based on filter conditions
  FOR filter_key, filter_value IN
    SELECT * FROM jsonb_each_text(filter_conditions)
  LOOP
    IF where_clause != '' THEN
      where_clause := where_clause || ' AND ';
    END IF;
    where_clause := where_clause || format('metadata->>%L = %L', filter_key, filter_value);
  END LOOP;

  -- Execute the query
  RETURN QUERY EXECUTE format('
    SELECT
      documents.id,
      documents.content,
      documents.metadata,
      1 - (documents.embedding <=> $1) AS similarity
    FROM documents
    WHERE 1 - (documents.embedding <=> $1) > $2
    %s
    ORDER BY documents.embedding <=> $1
    LIMIT $3',
    CASE WHEN where_clause != '' THEN 'AND ' || where_clause ELSE '' END
  ) USING query_embedding, match_threshold, match_count;
END;
$$;

-- Create trigger to update updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_documents_updated_at
  BEFORE UPDATE ON documents
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Create RLS policies for security
ALTER TABLE documents ENABLE ROW LEVEL SECURITY;

-- Policy for users to access documents from their store
CREATE POLICY "Users can access their store documents" ON documents
  FOR ALL USING (
    auth.uid() IN (
      SELECT user_id FROM store_users 
      WHERE store_id = (metadata->>'store_id')::UUID
    )
  );

-- Policy for service role to access all documents
CREATE POLICY "Service role can access all documents" ON documents
  FOR ALL USING (auth.role() = 'service_role');

-- Insert sample data for testing (optional)
-- INSERT INTO documents (content, metadata, embedding) VALUES 
-- ('Sample product description for testing vector search', 
--  '{"type": "product", "store_id": "sample", "category": "test"}',
--  array_fill(0, ARRAY[1536])::vector);

-- Add helpful comments
COMMENT ON TABLE documents IS 'Vector storage for AI-powered search and recommendations';
COMMENT ON COLUMN documents.embedding IS 'Vector embedding generated by OpenAI text-embedding-3-small (1536 dimensions)';
COMMENT ON FUNCTION match_documents IS 'Find similar documents using cosine similarity';
COMMENT ON FUNCTION match_documents_with_filter IS 'Find similar documents with metadata filtering';